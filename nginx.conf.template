worker_processes auto;
error_log /var/log/nginx/error.log warn;
events { worker_connections 1024; }

http {
  # Upstream (templated)
  upstream primary_backend {
    server $PRIMARY_HOST max_fails=1 fail_timeout=3s;
    server $SECONDARY_HOST backup max_fails=1 fail_timeout=3s;
  }

  # Custom log format: pool, release, status, upstream_status, upstream_addr, request_time, upstream_response_time, remote_addr, method, path
  log_format bg_log '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    'pool="$http_x_app_pool" release="$http_x_release_id" '
                    'upstream_status="$upstream_status" upstream_addr="$upstream_addr" '
                    'req_time=$request_time up_resp_time=$upstream_response_time';

  access_log /var/log/nginx/access.log bg_log;

  # preserve upstream headers so watcher can read them when Nginx proxies
  proxy_hide_header X-App-Pool;
  proxy_pass_header X-App-Pool;
  proxy_pass_header X-Release-Id;

  server {
    listen 80;
    server_name _;

    proxy_connect_timeout 2s;
    proxy_send_timeout 5s;
    proxy_read_timeout 5s;
    proxy_next_upstream error timeout http_502 http_503 http_504 http_5xx;
    proxy_next_upstream_tries 2;

    location / {
      proxy_pass http://primary_backend;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # ensure app headers propagate
      proxy_pass_header X-App-Pool;
      proxy_pass_header X-Release-Id;
    }

    location = /version {
      proxy_pass http://primary_backend/version;
      proxy_pass_header X-App-Pool;
      proxy_pass_header X-Release-Id;
    }

    location /healthz {
      proxy_pass http://primary_backend/healthz;
    }
  }
}
